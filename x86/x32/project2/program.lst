     1                                      section .text 
     2                                      global  emphasize8
     3                                  emphasize8: ; Enhance the dynamic range of 8 bpp grayscale image so that the darkest shade becomes black and the lightest â€“ white. Change the intermediate shades proportionally.
     4                                  
     5 00000000 55                          push    ebp
     6 00000001 53                          push    ebx 
     7 00000002 56                          push    esi  
     8 00000003 57                          push    edi
     9                                  
    10 00000004 8B7508                      mov     esi, [ebp + 8] ; image pointer 
    11 00000007 8B450C                      mov     eax, [ebp + 12] ; image width
    12 0000000A 8B4D10                      mov     ecx, [ebp + 16] ; image height
    13 0000000D 8B5514                      mov     edx, [ebp + 20] ; image stride | offset to next row
    14 00000010 29C2                        sub     edx, eax ; stride - width, offset to next row
    15 00000012 31DB                        xor     ebx, ebx ; upper part is darkest, lower part is lightest
    16 00000014 B300                        mov     bl, 0x00 ; darkest shade
    17 00000016 B7FF                        mov     bh, 0xFF ; lightest shade
    18                                  
    19                                  find_traverse: 
    20 00000018 85C0                        test  eax, eax ; if width == 0
    21 0000001A 741E                        jz    detect_end_of_row
    22 0000001C 8A36                        mov   dh, [esi] ; load pixel value
    23 0000001E 38DE                        cmp   dh, bl 
    24 00000020 7708                        ja    set_black
    25 00000022 38FE                        cmp   dh, bh
    26 00000024 720E                        jb    set_white
    27 00000026 46                          inc   esi ; advance to next pixel
    28 00000027 48                          dec   eax ; width--
    29 00000028 EBEE                        jmp   find_traverse
    30                                  
    31                                  
    32                                  set_black:
    33 0000002A 88F7                        mov   bh, dh ; lightest shade = pixel value
    34 0000002C 38F3                        cmp   bl, dh 
    35 0000002E 7204                        jb    set_white
    36 00000030 46                          inc   esi ; advance to next pixel
    37 00000031 48                          dec   eax ; width--
    38 00000032 EBE4                        jmp   find_traverse
    39                                      
    40                                  
    41                                  set_white:
    42 00000034 88F3                        mov   bl, dh
    43 00000036 46                          inc   esi ; advance to next pixel
    44 00000037 48                          dec   eax ; width--
    45 00000038 EBDE                        jmp   find_traverse
    46                                  
    47                                  detect_end_of_row:
    48 0000003A 85C9                        test  ecx, ecx ; if height == 0
    49 0000003C 740A                        jz    finish_traverse
    50 0000003E B600                        mov   dh, 0
    51 00000040 01D6                        add   esi, edx ; image pointer + offset to next row
    52 00000042 49                          dec   ecx ; height--
    53 00000043 8B450C                      mov   eax, [ebp + 12] ; width
    54 00000046 EBD0                        jmp   find_traverse
    55                                  
    56                                  
    57                                  finish_traverse:
    58 00000048 8B7508                      mov     esi, [ebp + 8] ; image pointer 
    59 0000004B 8B450C                      mov     eax, [ebp + 12] ; image width
    60 0000004E 8B4D10                      mov     ecx, [ebp + 16] ; image height
    61                                  
    62                                  
    63                                  return:
    64 00000051 8B4514                      mov    eax, [ebp + 20]
    65 00000054 5F                          pop    edi
    66 00000055 5E                          pop    esi
    67 00000056 5B                          pop    ebx
    68 00000057 5D                          pop    ebp  
    69 00000058 C3                          ret
    70                                  
